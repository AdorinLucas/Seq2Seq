{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c0ac0b05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting torch==1.8.0\n",
      "  Downloading torch-1.8.0-cp39-none-macosx_10_9_x86_64.whl (120.6 MB)\n",
      "\u001b[K     |████████████████████████████████| 120.6 MB 1.7 MB/s eta 0:00:011     |██████████████████████████████▎ | 114.3 MB 1.7 MB/s eta 0:00:04\n",
      "\u001b[?25hCollecting torchtext==0.9.0\n",
      "  Downloading torchtext-0.9.0-cp39-cp39-macosx_10_9_x86_64.whl (1.5 MB)\n",
      "\u001b[K     |████████████████████████████████| 1.5 MB 56.6 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: typing-extensions in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from torch==1.8.0) (4.1.1)\n",
      "Requirement already satisfied: numpy in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from torch==1.8.0) (1.22.4)\n",
      "Requirement already satisfied: tqdm in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from torchtext==0.9.0) (4.64.0)\n",
      "Requirement already satisfied: requests in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from torchtext==0.9.0) (2.27.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from requests->torchtext==0.9.0) (3.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from requests->torchtext==0.9.0) (2021.10.8)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from requests->torchtext==0.9.0) (2.0.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/adorinklucas/opt/anaconda3/lib/python3.9/site-packages (from requests->torchtext==0.9.0) (1.26.9)\n",
      "Installing collected packages: torch, torchtext\n",
      "Successfully installed torch-1.8.0 torchtext-0.9.0\n"
     ]
    }
   ],
   "source": [
    "!pip install -U torch==1.8.0 torchtext==0.9.0\n",
    "\n",
    "# Reload environment\n",
    "exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5492ac4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      ".vector_cache/glove.6B.zip: 862MB [02:40, 5.38MB/s]                             \n",
      "100%|███████████████████████████████▉| 399999/400000 [00:10<00:00, 36379.18it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 01 | Time: 75m 34s\n",
      "\tTrain Loss: 5.842 | Train PPL: 344.325\n",
      "\t Val. Loss: 5.732 |  Val. PPL: 308.608\n",
      "Epoch: 01 | Time: 78m 31s\n",
      "\tTrain Loss: 5.138 | Train PPL: 170.360\n",
      "\t Val. Loss: 5.641 |  Val. PPL: 281.843\n",
      "Epoch: 01 | Time: 72m 42s\n",
      "\tTrain Loss: 4.840 | Train PPL: 126.454\n",
      "\t Val. Loss: 5.558 |  Val. PPL: 259.406\n",
      "Epoch: 01 | Time: 72m 24s\n",
      "\tTrain Loss: 4.566 | Train PPL:  96.133\n",
      "\t Val. Loss: 5.449 |  Val. PPL: 232.620\n",
      "Epoch: 01 | Time: 74m 3s\n",
      "\tTrain Loss: 4.353 | Train PPL:  77.685\n",
      "\t Val. Loss: 5.418 |  Val. PPL: 225.373\n",
      "Epoch: 01 | Time: 78m 11s\n",
      "\tTrain Loss: 4.145 | Train PPL:  63.095\n",
      "\t Val. Loss: 5.426 |  Val. PPL: 227.201\n",
      "Epoch: 01 | Time: 74m 13s\n",
      "\tTrain Loss: 3.951 | Train PPL:  51.962\n",
      "\t Val. Loss: 5.461 |  Val. PPL: 235.415\n",
      "Epoch: 01 | Time: 72m 1s\n",
      "\tTrain Loss: 3.755 | Train PPL:  42.741\n",
      "\t Val. Loss: 5.518 |  Val. PPL: 249.141\n",
      "Epoch: 01 | Time: 70m 42s\n",
      "\tTrain Loss: 3.547 | Train PPL:  34.710\n",
      "\t Val. Loss: 5.572 |  Val. PPL: 262.998\n",
      "Epoch: 01 | Time: 70m 35s\n",
      "\tTrain Loss: 3.343 | Train PPL:  28.312\n",
      "\t Val. Loss: 5.674 |  Val. PPL: 291.217\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAABApklEQVR4nO3deXhU1fnA8e+bHUiAbEAIOyICAgEDGFBcUHGpgiKo9YcsWrWtddcqtVVbtVqttrZu4IZ1oSDu4r6hFYEAEQREEIIEAgQQSIDs7++Pc5MMEEKATG6W9/M888zMucu8mczMe885954jqooxxhgDEOJ3AMYYY+oOSwrGGGPKWVIwxhhTzpKCMcaYcpYUjDHGlLOkYIwxppwlBWOMMeUsKfhARN4TkXF1II67ROTFIOx3vIh8FfA8T0S6VGdd44hIdxFZJCK5InKt3/GYxsOSQjV5P2xlt1IR2RPw/NJD2ZeqnqWqU4MV65ESkWQRKRaRrpUse11EHjqU/alqtKquPow4OomIikjYoW57pEQkM+B/vElEnhORaG/Z5yKS7y3bIiKviUiSt+x5EbmnBkK4FfhcVWNU9dFK4vtcRK7Yp+xkEcnap+wXIjJPRHaJyFYReUlE2nnLJgV8hvNFpCTg+VJvHfW2zROR9SLysIiEBux/vIgsEZHdIrJRRJ4QkZbesicD9lcoIkUBz9/z1okUkb+KyE/e+71SRG4WEankb37e+1y2reqN89Yr9BJqroh8571Gi+q++d7//7Tqrn+4aut1DoUlhWryftiiVTUa+Ak4N6DspbL1/PgBq2mquh74BBgbWC4iccDZQJ1NaDXsXO//3R8YANwRsOwab9nRQEvgkRp+7Y7A0iPZgYhcCLwM/BNIAHoBBcBXIhKrqvcFfKavBuYEfKZ7Beyqr7fOMOCXwK+8/d8EPADcArQAjvfi/khEIlT16oD93wf8N2D/Z3n7nuHt92wgBveZuwr4+z5/SzNgFLADqM5B2N9UNQZIBCZ4sf3P24+pgiWFI1R2dCYivxeRjcBzIhIrIu+ISI6I/Ow9bhewTflRXlnziYg85K27RkTOquL1bhORH70joGUicn7Asir3JSKdReQLb9uPcD8UBzKVfZICcDGwVFWXVBVHJTGriBzlPY4XkbdEZKeIzAP2q41Uh4i09fazTURWicivApYNFJF07zU2icjDXnmUiLzoHTFvF5H5ItL6YK/lJcn3gGMrWbYNmFnZsmr8DeeJyFIvls9FpIdX/ilwCvBv76j66MPYt+B+WO9R1ZdUdY+qbgSuAPKAGw51n6r6PfAlcKyINAfuBn6nqu+rapGqZgJjcInh/6oR4zDgDGCUqn6nqsWq+o237XWyd5PjKGA78Geg2k2vqpqvqvOB84B4XIJARLqKyKfeZ2GLuBpUS2/Zf4AOwNve+3+rVz7Dqw3tEJHZIlKeOEXkbO97kCuuRnVzwLJfiEiG93/+WkT6VPU6frOkUDPaAHG4L8OVuPf1Oe95B2AP8O8qth8ErMD9SP8NeKay6rPnR+BE3JHZ3cCL4jVdVGNfLwMLvGV/oeov1+tAgoicEFA2FnihmnEcyGNAPpAETPRuh+MVIAtoC1wI3Of9yIA7Mv6nqjbHJZ3pXvk4L972uB+Iq3H/myqJSHvckeyiSpYl4H6w9lt2kH0e7f0N1+OOZmfhfhwiVPVU3I/vNd5R9Q+Hsm9Pd9xnb0ZgoaqW4pLY6Ye6QxHpifufLwIGA1HAa/vsPw+XQKuz/9OBuaq6bp99zMX9b4cFFI/DvV/TgGNEpP+hxK6qucBHXvwAAvwV9/npgftM3OWtO5a9WwP+5m3zHtANaAUsBMpbCIBngKu82smxwKcAXpzP4mo/8cBTwFsiElnF6/jKkkLNKAXuVNUC74hsq6rOVNXd3ofxXuCkKrZfq6pTVLUEd4SeBFR6BKuqM1R1g6qWqup/gZXAwIPtS0Q64JpA/ujFORt4+0ABqeoe3A/KZQAi0g04DpdYqhPHfsS1RY8C/qSqu1T1Ow6jKcr7kT4B+L13JJgBPE1FzaYIOEpEElQ1zzv6LCuPB45S1RJVXaCqO6t4qTdEZDvwFfAFrgmkzKPesm+BbODGQ/wzLgLeVdWPVLUIeAhogvuxra5HvaPP7V4s7wQsK6sFZleyXTZV1xL3tVBEfsZ9Xp7GHfAkAFtUtfgI9p9wgPjK9pEI4H12TwFeVtVNuKbNwzlRYwPu4A1VXeW99wWqmgM8TNXfUVT1WVXNVdUCXALpKxX9FEVATxFprqo/q+pCr/xXwFOqOtf7zE3FNeEdfxjx1wpLCjUjR1Xzy56ISFMReUpE1orITmA20FICOuj2sbHsgaru9h5GV7aiiFwWUBXdjjsqCfwCHmhfbYGfVXVXwLprD/J3TQXGiEgU7gf3fVXdXM04KpMIhAGBR4YHi6EybYFtXsIN3E+y9/hyXFv/914T0S+88v8AHwDTRGSDiPxNRMKreJ2RqtpSVTuq6m+8RFnmWm9Zsqpe6v2wHOrfUP63e0fw6wL+huooi6GlqrYEfhGwbIt3X1ntLSlgeXX0V9VYVe2qqnd4sW7B1SQr60Or7v63HCC+sn2UvadjgeVe8gd3hP7Lg/zvKpMMbAMQkVYiMs1r6tkJvEgVn18RCRWR+70m051ApreobJtRuNrkWnFNtGleeUfgpn2Sd3vc/79OsqRQM/Ydf/wmXPV9kNeEMdQrP1CTULWISEdgCnANEO/9EHxXzf1mA7Gyd0dbh6o2UNUvga3ACFw77wtHGEcOUIz7UlQrhgPYAMSJSMw++1nvxb1SVS/BVfMfAF4VkWZeu/fdqtoTd0T+C7yakA824H4wgPI+gPZ4f0MNWIFrghkdWCgiIbgfsE+OcP9zcEe8F+yz/2bAWdXc/8fAIK/mF7iPgbj/52yv6DKgi9eevxF3VJ/gvU61iDtz7DRcsxy4piMF+njf0f9j78/vvt/pX+K+B6fhmiA7le0aQFXnq+oI3GfuDSqaLNcB9wYmb1VtqqqvHOB1fGdJIThicG3V28WdsXNnDe23Ge5DlAMgIhOoZgenqq4F0oG7RSTC6ys4txqbvoD7YW1JRXPTYcXhNWm9Btzl1aZ6Ur1mgEhxncRRXq1lPfA18FevrA+udvCSF8//iUiid0S73dtHiYicIiK9vRrbTlyVv6Qar3+oQgPjFZGIStaZDpwjIsO8I96bcD+yX9dEAKqqwM3AHSLySxFpIiJtcM0/zTnCs6VUdQeuL+lfInKmiISLSCdck2MWrlZ2sH18jEseM0Wkl3c0fjzu//iCqq7wjri74pomU7zbsbhmzIN+dsSd8noc7of6Z1zTF7jvaB7uO5qMO4Mq0CYgsKM7Bvf/2Qo0JaAp0fs+XSoiLbymwJ1UfK6mAFeLyCBxmonIOQEHNPu+ju8sKQTHP3Dtw1uAb4D3a2KnqroMd0bJHNyHqTfwv0PYxS9xHdHbcInqhapXB2+dDrjTCQtqII5rcM1ZG4HnqfiSViUPl2TLbqcCl+CO1jbgOsXvVNWPvPXPBJaKSB6u0/lir3mvDfAq7ku7HNdPUOMX7wG37RPvp/uuoKorcEen/8J9Ts7FdTgW1lQQXl/PWNyZRluAZbjP5RBV3VoD+/8bMAnXH7ITmIs7Mh5W9lmphlHAZ7jvSD7uM/U+7oQNcD/8b6rqElXdWHbD/V9/4R10VeZWEcnFfdZfwJ1gMTig+fRu3KnGO4B32afDHFeTuMNr8rnZ28da3AHJMtz3OtBYINNrWroa7+wrVU3H9Sv8G5eUVgHjq3gd34nazGvGmDpCRKbi2v7PrskEaarPagrGmLrkCtypo4d0yqmpOVZTMMYYU85qCsYYY8rV63F6EhIStFOnTn6HYYwx9cqCBQu2qGpiZcvqdVLo1KkT6enpfodhjDH1iogc8KJRaz4yxhhTzpKCMcaYckFLCt6VnPNE5FtxwwPf7ZXf5Y03kuHdzg7Y5nZxwyCvEJHhwYrNGGNM5YLZp1AAnKqqed5l/F+JN9sS8Iiq7jV7lzfkwcW4iUDaAh+LyNHe0AjGGGNqQdBqCurkeU/DvVtVF0WMAKZ5Q9muwV0OXuVQzMYYY2pWUPsUvAGuMoDNwEfqJs8AuEZEFovIsyIS65Uls/eQyllUMoywiFwpblat9JycQx2t2BhjTFWCmhS8SSVSgHbAQBE5FngCN+phCm4457K5WCsbdnm/moWqTlbVVFVNTUys9DRbY4wxh6lWzj5S1e3A58CZqrrJSxaluGFly5qIsth7nP12uBEwa97WzfDqs7D9iAeKNMaYBiWYZx8lSsVE2E1wk1N8L3vP43s+bnIWgLeAi73xzzvj5kKdF5TgCvbA+9MhY9/Rb40xpnEL5tlHScBUb0KTEGC6qr4jIv8RkRRc01AmbkJrVHWpiEzHjVVeDPw2aGceJXWAVm0hYw6cfE5QXsIYY+qjoCUFVV0M9KukfGwlq5ctuxc3yX1wiUC/NPj4TdizC5o0O/g2xhjTCDTeK5pTBkNJMSyxsZOMMaZM400KXY+BmBauCckYYwzQmJNCSCj0PR6WzIPiIr+jMcaYOqHxJgWAlDTYsxtWLPE7EmOMqRMad1Lo2Q8iIiHja78jMcaYOqFxJ4WISOh1nLteweaqNsaYRp4UAPoNhp+3wNqVfkdijDG+s6TQZyCEhNhZSMYYgyUFiG4O3Y6FRZYUjDHGkgK4JqT1mbA5OOPvGWNMfWFJASDleHdvTUjGmEbOkgJAQhto38WakIwxjZ4lhTIpabBqGeRu9zsSY4zxjSWFMv3SQEvh2+BM4WCMMfWBJYUy7btCXCvrVzDGNGqWFMqIuA7nZQuhIN/vaIwxxheWFAL1S4PCApcYjDGmEbKkEKhbb2gabWchGWMarUaZFFSVxXmL0X0HwQsLc8NeLJ4LJcGZHtoYY+qyRpkUFuYtZMIPE5jwwwT+t+N/eyeHlDTI2wk/LvMvQGOM8UmjTAq9m/VmUvtJ5BTlcO2P1zJuxTi+3PGlSw7HHgdh4bDI5lgwxjQ+jTIpRIREMCpxFG/0fIM7OtzBz8U/c/2P1zN2xVi+yJ+P9uhrcywYYxqloCUFEYkSkXki8q2ILBWRu73yOBH5SERWevexAdvcLiKrRGSFiAwPVmxlwkPCOT/hfF7r9Rp/6vAndhbv5MbVN3Lp4Aw+i85Es9YEOwRjjKlTgllTKABOVdW+QApwpogcD9wGfKKq3YBPvOeISE/gYqAXcCbwuIiEBjG+cuESzoiEEczsNZO7Ot7F7ijh5rN28ssNv+GTnz+hVEtrIwxjjPFd0JKCOnne03DvpsAIYKpXPhUY6T0eAUxT1QJVXQOsAgYGK77KhEs458afy6vHvs6fF3enoCCXW9fcyiXLL+Gjnz+y5GCMafCC2qcgIqEikgFsBj5S1blAa1XNBvDuW3mrJwPrAjbP8sr23eeVIpIuIuk5OTlBiTtMwjin9Uhm/CeaexJ+T7EWc9ua27ho+UV8sO0DStROVzXGNExBTQqqWqKqKUA7YKCIHFvF6lLZLirZ52RVTVXV1MTExBqKtBL90ghV4axVUUzvOZ37Ot0HwKTMSYxZNoZZ22ZZcjDGNDi1cvaRqm4HPsf1FWwSkSQA736zt1oW0D5gs3aAf1OhtWnvbovmECqhDI8bzn97/Jf7O99PqITyx8w/MnrZaN7d+i7FWuxbmMYYU5OCefZRooi09B43AU4DvgfeAsZ5q40D3vQevwVcLCKRItIZ6Ab4O451Shr8sBh2u66REAnh9NjTmdZjGn/r/DciQiL409o/ceGyC3l769uWHIwx9V4wawpJwGcishiYj+tTeAe4HzhdRFYCp3vPUdWlwHRgGfA+8FtVn9tn+qW54S6WzN+rOERCGBY7jJePeZmHujxE05Cm3LX2Li5YegFvbnmTIi3yKWBjTGOwcvdKvt/9fVD2LfuN/1OPpKamanp6evBeoLQUbrnUDZR39aQDrqaqzN4xmykbp7B893LaRrRlQpsJnBt3LuEh4cGLzxjTqPyU/xNPZj/Jhz9/SFrzNP511L8Oaz8iskBVUytbFnZEETZ0ISHQ93iY+zkUFUJ4RKWriQgntTyJoS2G8tXOr5iSPYV7f7qXZzY+w8TWEzk3/lwiQirf1hhjDmZj4UamZE/h7a1vEx4SzoTWExjbemxQXsuSwsGkpMHs9+D7b6H3gCpXFRFObHEiJzQ/ga93fs3k7Mnct+4+ntn4DOPbjGdk/EhLDsaYattWtI1nNz7Lq1teBWBM4hgmtJlAfHh80F7TksLB9EiByCZums6DJIUyIsKQFkMY3Hww3+R+w5TsKTyw7gGe2/gc41uPZ2TCSCJDIoMbtzGm3tpZvJP/bPoPr+S8QmFpIefGn8sVSVeQFJEU9Ne2PoXqeOIeWLUUHnzJNSkdIlVlXu48JmdPJmNXBgnhCYxrPY4LEi4gKiQqCAEbY+qjPSV7eCXnFV7Y9AK5JbkMjx3OVUlX0TGqY42+jvUpHKl+g2HBV5D5A3Q55pA3FxEGNR/EwJiBpOelMyV7Cn/P+jvPb3yey1pfxoj4EcSExQQhcGNMfVBYWsjMLTN5duOzbCvextAWQ/l10q85uunRtR6LJYXq6D0AQkPdHAuHkRTKiAgDYgYwIGYAC3IXMDl7Mo+sf4Qnsp/g7LizGZ0w2pcPgTHGH8VazDtb32Fy9mQ2FW0iNTqVh5Mfpnez3r7FZM1H1fX322D7NvjL5Brd7fLdy5mRM4P3t71PgRbQt1lfRieOZljLYdYpbUwDVaqlfPTzRzyV/RRrC9bSq2kvrml7DQOb184YoFU1H1lSqK5P34KXH4d7prjhL2rYjuIdvLP1HWZsmcG6gnXEhsUyMn4koxJGkRQZ/M4lY0zwqSpf7vySxzc8zso9K+ka1ZXftv0tQ1sMRaSy4d+Cw5JCTdi6GX5/GYy6HM4aHbSXKdVS5ubOZUbODL7c8SUAJ7Y4kQsTL+T4mOMJkUY5WZ4x9d783Pk8tuExluxaQvvI9lyddDVnxJ7hy3faOpprQnwr6HCUOzU1iEkhREJIa55GWvM0sguzeX3L67y+5XW+2PEF7SLbcWHChZwXfx4twloELQZjTM1ZsmsJj294nHm582gd3po/dPgD58afS7jUzdEOrKZwKN5+Cd56ER56GVrEHnz9GlJYWsin2z9lRs4MMnZlECmRDI8bzuiE0fRs1rPW4jDGVN/KPSt5YsMTfLHjC2LDYpnYZiKjEkbViWuUrKZQU1LS4M3/wLffwNCzau1lI0IiODPuTM6MO5Mfdv/Aq1teZda2Wby19S16Ne3F6MTRnB57ul3zYEwdsC5/HU9mP8kHP39As9Bm/CbpN1zS6hKahjb1O7RqsZrCoVCF28dD245w7Z9r73UrkVuSy6yts5ixZQZr8tfQIrQF58Wfx6jEUbSPrPmOcGNM1TYWbuTp7Kd5a+tbhIeEc3HixVzW+rI62dRrNYWaIgIpg+HzdyB/D0Q18S2UmNAYLmp1EWMSx5Cel86MnBm8vPllXtz8IoObD+bCxAsZ0nwIoRLqW4zGNAbbirbx3KbneDXnVUop5cLEC5nYZiIJ4Ql+h3ZYLCkcqn5p8PHrsHQBHHeC39HsdUHc5sLNvLH1DWZumckNP95AUkQSoxJGMTJ+JLHhtdcHYkxjkFucy382/4eXN79MQWkB58afy6/a/Kren0JuzUeHqqQEbrwY+gyEy2+p3deupiIt4ovtXzAjZwbpeemESzinx57O6ITR9G7Wu1bPhzamodlTsodpOdOYumkquSW5nBF7BlclXUWnqE5+h1Zt1nxUk0JDoe8gyPgGioshrO69heESzmmxp3Fa7Gms3rOaV7e8yjtb32HWtll0b9Kd0YmjOTP2TJqE+tf8ZUx9UlBawOJdi5mfO583trzB1uKtnND8BH7T9jd0b9rd7/BqlNUUDsfC/8Hjf4Gb7ndDa9cDu0t2896295ieM51V+auIDo3m3LhzuTDxwnp1hGNMbSgqLWLp7qWk56YzP3c+i3ctplALCSGEATEDuCrpKvpG9/U7zMNmVzTXtIJ8uH6MOy31kl/X/usfAVUlY1cGM3Jm8Mn2TyjWYgbFDGJM4hiGthhqV0ybRqlES1ixewXzc+czP28+GXkZ7CndA0D3Jt1JjUklNSaVftH9iAmt/yMaW/NRTYuMgp79YNEcuPhqd1ZSPSEi9IvuR7/ofmwt2sqbW9/k1ZxXuWn1TXRr0o0r2lzBqS1PteRgGrRSLeXHPT8yP28+6bnpLMhbQF5JHgCdozpzbvy5DIgeQP+Y/rQMa+lvsLXMksLh6jcYvp0L61ZDh65+R3NY4sPjmdhmIpe1vowPt33I0xuf5vdrfk/XqK5ckXQFp7U8zZKDaRBUlcyCzPLmoAV5C9hevB2AdpHtOL3l6aTGpHJczHEkhif6G6zPLCkcrj6DXA1h0df1NimUCZMwzo4/m+Fxw/nw5w95Ovtpbl9zO1OipnBFmys4LfY0u97B1DvrC9YzP9fVBObnzWdL0RYAWoe3ZkjzIQyIGUBqTGqtTHFZnwStT0FE2gMvAG2AUmCyqv5TRO4CfgXkeKtOUtVZ3ja3A5cDJcC1qvpBVa/hW59CmQdugvx8uPMx/2IIghIt4eOfP+bpjU+zOn81nSI7cXnS5QyPHW7JwdRZmws3lyeA+bnzyS7MBiAuLI7UmFR3PU/0ANpFtmv0p2X70tEsIklAkqouFJEYYAEwEhgD5KnqQ/us3xN4BRgItAU+Bo5W1ZIDvYbvSeGDmTBjCtz/PCS08S+OICnVUj7Z/glTsqfwY/6PdIzsyOVtLmd43HDCxCqZxl/biraRnpdOeq67rS1YC0Dz0OYcF31ceU2gS1SXRp8E9uVLR7OqZgPZ3uNcEVkOJFexyQhgmqoWAGtEZBUuQcwJVoxHLCXNJYWMb+C0kX5HU+NCJITTY09nWMthfLb9M6ZsnMKf1v6JKRuncHmbyzkr7ixLDqbW7CzeyYK8BeX9Aj/m/whA05Cm9I/uz/kJ5zMgZgDdmnSzGu0RqJVvtIh0AvoBc4EhwDUichmQDtykqj/jEsY3AZtlUUkSEZErgSsBOnToENzAD6Z1Wzc4XsacBpkUyoRICMNih3FKy1P4fMfnPJ39NHetvYunNz5dnhzq6tjwpv7KK8ljUd6i8prAij0rUJRIiSQlOoUz485kQMwAjml6jH3+alDQr1MQkWjgC+BeVX1NRFoDWwAF/oJrYpooIo8Bc1T1RW+7Z4BZqjrzQPv2vfkI4LXn4f3p8PB/Ibr+n79cHarK7B2zmZw9me/3fE9yRDIT2kzgF3G/IDzEvpzm8Owp2cOiXRVJ4Pvd31NCCeESTu9mvUmNdv0CxzY71uYvP0K+XacgIuHATOAlVX0NQFU3BSyfArzjPc0CAsd8bgdsCGZ8NaJfGsyaBkvmQtppfkdTK0SEk1qexNAWQ/ly55dMyZ7CPT/dwzMbn2Fim4mcG3euJQdzUPml+SzOW1zeL/Ddru8ooYRQQjm22bGMbzOe1OhUekf3pkmIDclSW4LZ0SzAVGCbql4fUJ7k9TcgIjcAg1T1YhHpBbxMRUfzJ0C3Ot3RDFBaCreOhS7HwG/+6G8sPlFVvt75NZOzJ/Pd7u9oHd6aCW0mMCJ+hB3RmXKFpYUs2bXE1QTy0lmyawlFWkQIIfRo2qP8quGUZin1ZkKa+sqvmsIQYCywREQyvLJJwCUikoJrPsoErgJQ1aUiMh1YBhQDv60qIdQZISGuw3nOx1BYABH+T7VX20SEIS2GMLj5YObkzmFK9hTuX3c/z218jvFtxjMifkSdmILQ1K7A8YPS89JZnLeYAi1AELo36c5FiReVDx0RHRrtd7jGY2Mf1YTv0uEfd8Dv7nYjqDZyqsrc3LlMzp7Mt7u+JTE8kfGtxzMyYaRNGdqAFWsxy3cvL+8TyNiVQX5pPgDdmnQjNdrVBPpH96d5WHOfo23cbOyjYDumLzRp6q5utqSAiHB88+MZFDOI+XnzmZI9hQezHuS5Tc8xrvU4Lki4wJJDA1CiJfyw54fyq4Yz8jLYVboLgC5RXTgv/jxSo1PpH9Of2DCb5Km+sKRQE8LCofcANxZSaQmE2DnS4JLDwJiBDIwZSHpuOpOzJ/P3rL/z/Mbnuaz1ZYxKHGUdiPVIqZayas+q8o7hhXkLyS3JBaBjZEfOjDuT1Gg3flB8eLzP0ZrDZUmhpqSkwbwv4MfvoVsvv6Opc8o6ERfmLmTyxsk8sv4Rpm6aytjWYxmdMNom/KljVJUtxVtYm7+WVXtWsSBvAQtyF7CjZAcAyRHJnNryVPd/jU6lVUQrnyM2NcWSQk05dgCEhrkL2SwpHFD/mP48GfMki/IWMSV7Cv9c/0+XHFqNZUziGDvrpJbtKd3DT/k/sbZgLWvzvZv3uKwpCKBNRBtObHFieXK3QeQaLutorkmPTIItm+Cep+vVHAt+Wpy3mMkbJzNn5xxahLbgjNgzaB/ZnnaR7UiOTCY5ItlqEUeoVEvZVLiJzILMvX70M/Mz2VS0aa9120S0oWNkRzpFdaJjZEc6RrnHrcNb2/hBDYh1NNeWlMHw0r8hex209XkIjnqiT3Qf/n3Uv1myawnPbnyWWdtm7XWEChAfFl+eJNpFeMkiMpl2ke1ICEuwHytPbknuXkf7mfkuCawrWEeBFpSv1yykGZ2iOtE/uj8do7wf/shOtI9qb308xmoKNernLXDL/8EF4+Hsi/2Opl5SVXaU7GB9wXrWF6wnqzCLrIKs8sebCjehVHxmIyWyvEZRXruITKZ9RHuSIpMa3FlORVrEhoIN7ki/IHOvpp+txVvL1wsllLaRbfc62i97HB8Wb4m0kbOaQm2JTYBOR7tRUy0pHBYRoWVYS1qGtaRXs/37ZopKi8guzCarIIusQi9ZFGSxvnA96Xnp5fPqlkkMT3TJIqKidlFW24gLi/P9x7FUSynQAgpK3a2wtJB8zaegtIA9pXtYX7B+ryP/rIIsSqi4prNlWEs6RnbkhBYn0CGyQ/lRf7vIdjbUiDkslhRqWkoavDEVtm+FlnZaXk0LDwmnQ1QHOkTt3zynqvxc/DPrC12iKKthrC9cz7zceWzetnmv9ZuENNk7WQQkjwiJoKC0gHzNp7C0cL/HgT/k+z4v1ELyS/PLHxeUFpBfml/+OHD9Ii06+N8s4bSPbE+XqC6c0vKU8h/+jlEdaRHWosbeW2PAkkLN6+clhYxv4ORz/I6mURER4sLjiAuPo3ez3vstLygtYEPhhr2SRVny+GbnN3u1ux+qCIkgIiSCSIkkMsS7BTxuHtqciJAIokKiiJCIStcJfF62blJEEm0j2tr8AKbWWFKoaW07Qqu27tRUSwp1SmRIJJ2jOtM5qvN+y8rOyy/ryyihhCiJcj/0+/54BzwuSwQhEuLDX2RMzbOkUNNEXBPSJ2/Cnl3QpJnfEZlqEBESwxNJDE8kJTrF73CM8Y0d3gRDvzQoKYbvFvgdiTHGHBJLCsHQtQfEtHAD5BljTD1iSSEYQkLdaKlL5kPxwc8uMcaYusKSQrCkpLk+hRVL/I7EGGOqzZJCsPTs72Zhy7AmJGNM/WFJIVgiIqHXce56hXo8lIgxpnGxpBBMKWluPKS1K/2OxBhjqsWSQjD1HQQS4i5kM8aYesCSQjBFN3cT7iyypGCMqR8sKQRbv8GwPhM2b/A7EmOMOaigJQURaS8in4nIchFZKiLXeeVxIvKRiKz07mMDtrldRFaJyAoRGR6s2GpVSpq7tyYkY0w9EMyaQjFwk6r2AI4HfisiPYHbgE9UtRvwifccb9nFQC/gTOBxkQYwNGRiG2jX2Z2FZIwxdVzQkoKqZqvqQu9xLrAcSAZGAFO91aYCI73HI4BpqlqgqmuAVcDAYMVXq1LSYOVSyN3udyTGGFOlWulTEJFOQD9gLtBaVbPBJQ6glbdaMrAuYLMsr6z+65cGWgrfzvM7EmOMqVK1koKINBNxA8aLyNEicp6IVGuuPxGJBmYC16vqzqpWraRsv6u+RORKEUkXkfScnJzqhOC/DkdBXKL1Kxhj6rzq1hRmA1EikozrB5gAPH+wjbzEMRN4SVVf84o3iUiStzwJKJsjMQtoH7B5O2C/U3ZUdbKqpqpqamJiYjXD91nZHAvLFkJBvt/RGGPMAVU3KYiq7gYuAP6lqucDPavcwM2I/gywXFUfDlj0FjDOezwOeDOg/GIRiRSRzkA3oOG0t6QcD4UFsGyR35EYY8wBVTspiEgacCnwrld2sFnbhgBjgVNFJMO7nQ3cD5wuIiuB073nqOpSYDqwDHgf+K2qlhzSX1OXHd3HzcJmcywYY+qw6k7HeT1wO/C6qi4VkS7AZ1VtoKpfUXk/AcCwA2xzL3BvNWOqX8LCoM9AWDwXSkogtP6fbWuMaXiqVVNQ1S9U9TxVfcDrcN6iqtcGObaGp18a5O2EH5f5HYkxxlSqumcfvSwizUWkGa55Z4WI3BLc0BqgY1MhLNyakIwxdVZ1+xR6eqeTjgRmAR1w/QXmUEQ1hWNSbI4FY0ydVd2kEO6dXjoSeFNVi6jkGgJTDf3SICfbDZJnjDF1THWTwlNAJtAMmC0iHYGqLkQzB9J3kLu3C9mMMXVQdTuaH1XVZFU9W521wClBjq1hahkPXY6xORaMMXVSdTuaW4jIw2XDS4jI33G1BnM4UtLcFJ3b6skwHcaYRqO6zUfPArnAGO+2E3guWEE1eP0Gu3trQjLG1DHVTQpdVfVOVV3t3e4GugQzsAYtqT20aWdNSMaYOqe6SWGPiJxQ9kREhgB7ghNSI5GSBj8sht15fkdijDHlqpsUrgYeE5FMEckE/g1cFbSoGoN+aW64iyXz/Y7EGGPKVffso29VtS/QB+ijqv2AU4MaWUPX+RhoHmtNSMaYOuWQZl5T1Z0BE+XcGIR4Go+QEDec9pL5sGOb39EYYwxwZNNxHmgEVFNdJ57ppum851rI/MHvaIwx5oiSgg1zcaQ6d4fbHna1hgduhjmf+B2RMaaRqzIpiEiuiOys5JYLtK2lGBu2Dl3hjkddgnjmQZgxBUobztxCxpj6pcpJdlQ1prYCadRiWsKNf4X/PgUfzISsTLjyNmhmb78xpnYdSfORqUlhYXDpb+Gy6+D7b+He62DDWr+jMsY0MpYU6pqhZ8HND0D+HrjvBjf3gjHG1BJLCnVRt16un6F1Mjx2N7zzik3KY4ypFZYU6qq4RPj9QzDwZHhjKjx5r6s9GGNMEFlSqMsiIuGKW2H0FbDwa7j/RsjZ6HdUxpgGzJJCXScCwy+E6/7s5l+491rXEW2MMUEQtKQgIs+KyGYR+S6g7C4RWS8iGd7t7IBlt4vIKhFZISLDgxVXvXVsKvzhn+701Ydvh0/fsn4GY0yNC2ZN4XngzErKH1HVFO82C0BEegIXA728bR4XkdAgxlY/tU6GSY9A7wHw8uMw9R9QVOh3VMaYBiRoSUFVZwPVHeltBDBNVQtUdQ2wChgYrNjqtSbN4Ld3wi8uga8+gId+D9u3+h2VMaaB8KNP4RoRWew1L8V6ZcnAuoB1sryy/YjIlWVzRefkNNI5jkNCYOQ4uHoSrFvtLnRbs8LvqIwxDUBtJ4UngK5ACpAN/N0rr2zE1UobzFV1sqqmqmpqYmJiUIKsN1KHwu2PQGioN6Dex35HZIyp52o1KajqJlUtUdVSYAoVTURZQPuAVdsBG2oztnqrfRf4w6PQtQc88xD8d7Kb0c0YYw5DrSYFEUkKeHo+UHZm0lvAxSISKSKdgW7AvNqMrV6LaQE33AenngcfvQb//CPk5fodlTGmHgrmKamvAHOA7iKSJSKXA38TkSUishg4BbgBQFWXAtOBZcD7wG9V1Q53D0VYGPzyNzDuelix2F3PsD7T76iMMfWMaD0+1z01NVXT09P9DqPuWbUMHv8LFOS7K6L7pfkdkTGmDhGRBaqaWtkyu6K5ITqqpxtQL6mdG1Dv7ZegtNTvqIwx9YAlhYYqLhFufQiOPxXe/I8NqGeMqRZLCg1ZRCRcfguM+RUsmgN/vQFysv2OyhhTh1lSaOhE4IxRcP098PMWuOdaWJ7hd1TGmDrKkkJj0au/u56hRSw8Mgk+fsMG1DPG7MeSQmPSui1M+gf0GQTTnoTnH7EB9Ywxe7Gk0NhENYXf/BHOvRT+9yE8eKsNqGeMKWdJoTEKCYERY+HXd7gL3O65FlZ/73dUxpg6wJJCY3bcCXDbw+5q6L/eCC/8E3b87HdUxhgfWVJo7Np3gT/+G4ad55qTJk2EWdOgsMDvyIwxPrCkYKBZDFx8Ndz9FPRIgdeehzt+BXM/syuhjWlkLCmYCm3awTV3ws0PQHQMTHnAXfC2cqnfkRljaoklBbO/Y/rCHf+CCTe5C94euAmeuAc22xQXxjR0YX4HYOqokBAYcjqknggfzoT3pkPGNzBsBJxzsWtyMsY0OFZTMFWLjHLXNNz3LKSd6ibxmTQRPnkTiov9js4YU8MsKZjqaRkP4290Zyp16AqvPAF3XgUZc2y4DGMaEEsK5tB06Ao3/hWuvRskBP59N/z9Nvhpld+RGWNqgPUpmEMn4sZP6nkczJ4Fb70If/kdpJ0G54+D2AS/IzTGHCZLCubwhYXBqee5iXzeneb6GdJnw/AL4czRrj/CGFOvWPOROXJNo2H0FfCXKa4G8fZLrjP6qw+htMTv6Iwxh8CSgqk5iW3g6kluPKX4VvD8w/AXm9THmPrEkoKpeUf1hNsfgStvg925riP6X3fCxnV+R2aMOYigJQUReVZENovIdwFlcSLykYis9O5jA5bdLiKrRGSFiAwPVlymlojAwJPhnqdh1ERYsQTuvBpefhxyd/gdnTHmAIJZU3geOHOfstuAT1S1G/CJ9xwR6QlcDPTytnlcREKDGJupLeERcNYYd/HbiWfBZ++4/oYPXrVZ34ypg4KWFFR1NrBtn+IRwFTv8VRgZED5NFUtUNU1wCpgYLBiMz5o3hL+7xq463Ho2hNmPA1/vNKdrWQXvxlTZ9R2n0JrVc0G8O5beeXJQGCDc5ZXth8RuVJE0kUkPScnJ6jBmiBI7gTX/wVuuNedsvrkfXD/TTbzmzF1RF3paJZKyio9fFTVyaqaqqqpiYmJQQ7LBE2v4+DOx+Cy6yAnG+67HibfD5vW+x2ZMY1abV+8tklEklQ1W0SSgM1eeRbQPmC9doCN09zQhYTC0LNg4Enw/gz4YCbM+xw6HQ0DToIBQyHOEr8xtam2awpvAeO8x+OANwPKLxaRSBHpDHQD5tVybMYvUU1h5Dj463Nw4eVutrcZU+DWsXD/je5K6R37dk8ZY4JBNEidfCLyCnAykABsAu4E3gCmAx2An4DRqrrNW/8PwESgGLheVd872GukpqZqenp6MMI3ftu0HubPhvlfwPpMN/he996u9tD/BIhp4XeExtRbIrJAVVMrXRaspFAbLCk0EhvWugQx73OXLEJCoEc/1+zUb7AbZsMYU22WFEzDoArrVrvaw/wvYMsmCAuHXv1dH0TK8a4pyhhTpaqSgo2SauoPETefQ4eucMEEWPODSw7ps+Hbue5CuT4DXYLoPcBGaTXmMFhSMPWTCHTp7m6jr4Afl7kmpvQvYcFXLiH0Pd41MfU6ziUMY8xBWfORaVhKS9w4S/O/cMlhVy40aQb90txYTMekuHkgjGnErE/BNE7FxfB9Bsz7AhZ9DXt2QXRz6D/ENTF17+2ulTCmkbGkYExRISxd4JqYMuZAQT40j4XUE91prl17urOajGkErKPZmPAISElzt4J8WDLfNTF9+T58+pabVzp1qKtBdD7a9VkY0whZTcE0bvm73ZlL87+AJelQUgwJbdzprT37wdF9IKqJ31EaU6Os+ciY6tid5/oe5n8JK751TU6hYdC1B/Ts726djrJ+CFPvWVIw5lAVFcKqpbB0ISxbCD/96MqbRkOPFFeL6NkfEpN8DdOYw2F9CsYcqvAIN5RGj37A5ZC7HZZnuASxbJE73RVcUihLEMf0hWYxPgZtzJFrcEmhqKiIrKws8vPz/Q7FHEBUVBTt2rUjPDzc71CqL6alu85h4MluuI1NWS45LFsIcz+HL2a5Qfs6dXNJotdx0OUYNwyHMfVIg2s+WrNmDTExMcTHxyN2Bkmdo6ps3bqV3NxcOnfu7Hc4NaO4GNZ8X5Ek1qxww39HRkH3Pl5/RD9I6mBnNZk6oVE1H+Xn59OpUydLCHWUiBAfH0+Dmko1LAy6HetuI8bC7l2uo7qsqWmxNzVIy/iKpqYe/aBFrL9xG1OJBpcUAEsIdVyD//80beaG9O432D3fuqmiw/rbufD1x668XeeKWkS3Y20AP1MnNMikYEydEt/aTTs69Cw3NtNPP1bUIj59Cz6c6foeuvWqSBLtu9oV1sYXlhRq2NatWxk2bBgAGzduJDQ0lMREN8/wvHnziIg48Gid6enpvPDCCzz66KPVfr1OnTqRnp5OQkLCkQV+kNeIiYkhJCSE1q1b88ILL9CmTZsqy4MdU70VEurmoO50NJx9sbu6euV3FTWJmc/CTCC6hTv1tWsPt26HrhAR6Xf0phGwpFDD4uPjycjIAOCuu+4iOjqam2++uXx5cXExYQcYpTM1NZXU1Er7fnz32WefkZCQwKRJk7jvvvvKE9eByk01RUbBsanuBrB9Kyxf5GoRyzPcldbgag3JnbyE0s3dJ3e2EV9NjWvYn6hpT1ZcdFRTOnSFi68+pE3Gjx9PXFwcixYton///lx00UVcf/317NmzhyZNmvDcc8/RvXt3Pv/8cx566CHeeecd7rrrLn766SdWr17NTz/9xPXXX8+1115brddbu3YtEydOJCcnh8TERJ577jk6dOjAjBkzuPvuuwkNDaVFixbMnj2bpUuXMmHCBAoLCyktLWXmzJl069btgPseOnRopT/8Byo3h6hlPKSd5m4AP2+BzJWQuQIyf4CF/3PjNYFrcurQFTp6SaLz0dCmnV1xbY5Iw04KdcgPP/zAxx9/TGhoKDt37mT27NmEhYXx8ccfM2nSJGbOnLnfNt9//z2fffYZubm5dO/enV//+tfVOrf/mmuu4bLLLmPcuHE8++yzXHvttbzxxhv8+c9/5oMPPiA5OZnt27cD8OSTT3Lddddx6aWXUlhYSElJSZX7fuedd+jdu3e1y80Rik1wt35p7rkqbNnoZp3L9G5ffwyfve2WRzaBjkftXaNITLJTYU21NeykcIhH9ME0evRoQkPdEdyOHTsYN24cK1euREQoKiqqdJtzzjmHyMhIIiMjadWqFZs2baJdu3YHfa05c+bw2muvATB27FhuvfVWAIYMGcL48eMZM2YMF1xwAQBpaWnce++9ZGVlccEFFxywlnDKKacQGhpKnz59uOeeew5aboJExP3IJya5WeXAdV5vzPJqFF6i+PQtKPY+V81iXILo6NUmOh3tEo0xlWjYSaEOadasWfnjP/7xj5xyyim8/vrrZGZmcvLJJ1e6TWRkRcdiaGgoxcXFh/XaZaeAPvnkk8ydO5d3332XlJQUMjIy+OUvf8mgQYN49913GT58OE8//TSnnnrqfvso6zuobrmpRSGh0Lajuw32mp2Ki2DD2oAaxUp4f7q7qA6gRVxFTaJzd9cEFdPCv7/B1Bm+JAURyQRygRKgWFVTRSQO+C/QCcgExqjqz37EF2w7duwgOTkZgOeff77G9z948GCmTZvG2LFjeemllzjhhBMA+PHHHxk0aBCDBg3i7bffZt26dezYsYMuXbpw7bXXsnr1ahYvXlxpUjD1TFg4dDjK3U4625UVFsC6HytqFGt+cBfWlY1qkNC64syoTke7ZqgmzQ78GqZB8rOmcIqqbgl4fhvwiareLyK3ec9/709owXXrrbcybtw4Hn744Rr5Ae7Tpw8h3jntY8aM4dFHH2XixIk8+OCD5R3NALfccgsrV65EVRk2bBh9+/bl/vvv58UXXyQ8PJw2bdrwpz/96YjjqSymhx9+uEb2a45ARKSbYa5rz4qyPbtg7aqKZqfMlZD+pVsmAq3buRpFcmdI7uhuca2sj6IB82XsI6+mkBqYFERkBXCyqmaLSBLwuap2r2o/lY19tHz5cnr06BGEqE1Nsv9THZa7A9YG9E+sXeXOgioT1RTadnCnyLb1EkVyJze9qSWLeqEujn2kwIciosBTqjoZaK2q2QBeYmhV2YYiciVwJUCHDh1qK15jGo+YFntfOwFuAqL1a2FDpne/FhbNqTg9FlyHdnInlyTadqxIGtHNa/kPMEfCr6QwRFU3eD/8H4nI99Xd0Esgk8HVFIIVoDEmQNNoNwxHt157l+/c7hLE+kx327AWvvnMNUuVaRELbTt5SaJDxb31V9RJviQFVd3g3W8WkdeBgcAmEUkKaD7a7EdsxphD0Lylux3Tt6JM1TU3bVjrahVlyWL2LNfZXSauVUXTU1kzVFIHG87DZ7WeFESkGRCiqrne4zOAPwNvAeOA+737N2s7NmNMDRCBuER3C2yCKi11I8YGNkOtz3TDeZRdU1F2Hca+zVCtk23ColriR02hNfC6d+58GPCyqr4vIvOB6SJyOfATMNqH2IwxwRISUnHhXcrxFeUlJbB5Q0WNYn2mSxjfflNxXUVoKLRKdsN4tE72bt7j5i2tg7sG1XpSUNXVQN9KyrcCw2o7HmOMz0JDIam9u3FiRXlRobtSu6wZasNaNw3qkvkVNQuAJk33ThLlj9tav8VhsCuaa9jJJ5/M7bffzvDhw8vL/vGPf/DDDz/w+OOPH3Cbhx56iNTUVM4++2xefvllWrZsudc6lY24WlV5TbrrrruYMmUKiYmJFBcXc99993HeeedVWR7smEwjEB4B7bu4W6DSEtia4xLEpvXeLQt+XAbzPq+4GA9cJ/d+ySIZEtu4/Zv9WFKoYZdccgnTpk3bKylMmzaNBx98sFrbz5o1K1ihHZEbbriBm2++meXLl3PiiSeyefPmKsuNCZqQUPejnthm7z4LcLWLzRv2Thab1kPGN5C7vWI9CXFXcJcnCy9htEmG2MRGPcFRg04KD617iB/2/FCj+zy6ydHc3P7AR8AXXnghd9xxBwUFBURGRpKZmcmGDRs44YQT+PWvf838+fPZs2cPF154IXffffd+2wdOUHPvvffywgsv0L59exITEznuuOOqFaOqcuutt/Lee+8hItxxxx1cdNFFZGdnc9FFF7Fz506Ki4t54oknGDx4MJdffjnp6emICBMnTuSGG2444L579OhBWFgYW7ZsqVa5MbUqPMLrpO60/7LdeQHJwksYG9fDyqVQsGfvfbRqu3/tok2ym/yogfdfNOik4If4+HgGDhzI+++/z4gRI5g2bRoXXXQRIsK9995LXFwcJSUlDBs2jMWLF9OnT59K97NgwQKmTZvGokWLKC4upn///tVOCq+99hoZGRl8++23bNmyhQEDBjB06FBefvllhg8fzh/+8AdKSkrYvXs3GRkZrF+/nu+++w6gfEjtA5k7dy4hISHls8kdrNyYOqNptBv8r/M+AyWowo5t+9cuNvzk5tQuKd57H62S3Om0ca0gvpU7yyree9wAkkaDTgpVHdEHU1kTUllSePbZZwGYPn06kydPpri4mOzsbJYtW3bApPDll19y/vnn07RpUwDOO++8ar/+V199xSWXXEJoaCitW7fmpJNOYv78+QwYMICJEydSVFTEyJEjSUlJoUuXLqxevZrf/e53nHPOOZxxxhmV7vORRx7hxRdfJCYmhv/+97/lI68eqNyYekPETW7UMh667/N9LClxp9GWJYyNWW4+i43rYOkCN51qoPAI73TcVhWJIvB5bEKd78to0EnBLyNHjuTGG29k4cKF7Nmzh/79+7NmzRoeeugh5s+fT2xsLOPHjyc/P7/K/RzuD+yBxrMaOnQos2fP5t1332Xs2LHccsstXHbZZXz77bd88MEHPPbYY0yfPr08iQUq6zuobrkxDUJoqGtKatUWeg/Ye5kq7MqDbZth62Z3X/44x50ltWPb/vtsEQvxrSuSRVyiex7vPW8W42ttw5JCEERHR3PyySczceJELrnkEgB27txJs2bNaNGiBZs2beK999474DwK4H7Ax48fz2233UZxcTFvv/02V111VbVef+jQoTz11FOMGzeObdu2MXv2bB588EHWrl1LcnIyv/rVr9i1axcLFy7k7LPPJiIiglGjRtG1a1fGjx9fA++AMY2ACETHuFuHrpWvU1Toru7eluNqHNtyXNLYuhnWrXbNU0WFe28TGRWQLMqaqRIrmqxiE4I6N7clhSC55JJLuOCCC5g2bRoAffv2pV+/fvTq1YsuXbowZMiQKrcvm8s5JSWFjh07cuKJJx5w3XvuuYd//OMf5c/XrVvHnDlz6Nu3LyLC3/72N9q0acPUqVN58MEHCQ8PJzo6mhdeeIH169czYcIESr2LhP76178e+R9fSUxZWVk1sl9j6pWyTutWbStfrgp5OyoSRVnSKKt1/LTKjVobqKy5K3UoXHRljYfsy9DZNcWGzq6/7P9kTDUVFuyTLLzH7bvA6ecf1i7r4tDZxhhjqiMi0g3v0ebg87PXhMZ7hYYxxpj9NMikUJ+bxBoD+/8YU3c1uKQQFRXF1q1b7YenjlJVtm7dSlRUlN+hGGMq0eD6FNq1a0dWVhY5OTl+h2IOICoqinbtaqd91BhzaBpcUggPD6dz585+h2GMMfVSg2s+MsYYc/gsKRhjjClnScEYY0y5en1Fs4jkAGv9juMIJQA2CUEFez/2Zu9HBXsv9nYk70dHVa10nPt6nRQaAhFJP9Dl5o2RvR97s/ejgr0XewvW+2HNR8YYY8pZUjDGGFPOkoL/JvsdQB1j78fe7P2oYO/F3oLyflifgjHGmHJWUzDGGFPOkoIxxphylhR8IiLtReQzEVkuIktF5Dq/Y/KbiISKyCIRecfvWPwmIi1F5FUR+d77jKT5HZOfROQG73vynYi8IiKNaphdEXlWRDaLyHcBZXEi8pGIrPTuY2vitSwp+KcYuElVewDHA78VkZ4+x+S364DlfgdRR/wTeF9VjwH60ojfFxFJBq4FUlX1WCAUuNjfqGrd88CZ+5TdBnyiqt2AT7znR8ySgk9UNVtVF3qPc3Ff+mR/o/KPiLQDzgGe9jsWv4lIc2Ao8AyAqhaq6nZfg/JfGNBERMKApsAGn+OpVao6G9i2T/EIYKr3eCowsiZey5JCHSAinYB+wFyfQ/HTP4BbgVKf46gLugA5wHNec9rTItLM76D8oqrrgYeAn4BsYIeqfuhvVHVCa1XNBneQCbSqiZ1aUvCZiEQDM4HrVXWn3/H4QUR+AWxW1QV+x1JHhAH9gSdUtR+wixpqGqiPvLbyEUBnoC3QTET+z9+oGi5LCj4SkXBcQnhJVV/zOx4fDQHOE5FMYBpwqoi86G9IvsoCslS1rOb4Ki5JNFanAWtUNUdVi4DXgME+x1QXbBKRJADvfnNN7NSSgk9ERHBtxstV9WG/4/GTqt6uqu1UtROuA/FTVW20R4KquhFYJyLdvaJhwDIfQ/LbT8DxItLU+94MoxF3vAd4CxjnPR4HvFkTO21w03HWI0OAscASEcnwyiap6iz/QjJ1yO+Al0QkAlgNTPA5Ht+o6lwReRVYiDtrbxGNbMgLEXkFOBlIEJEs4E7gfmC6iFyOS5yja+S1bJgLY4wxZaz5yBhjTDlLCsYYY8pZUjDGGFPOkoIxxphylhSMMcaUs6RgzEGISImIZATcauzqYhHpFDjypTF+s+sUjDm4Paqa4ncQxtQGqykYc5hEJFNEHhCRed7tKK+8o4h8IiKLvfsOXnlrEXldRL71bmVDNYSKyBRvvoAPRaSJb3+UafQsKRhzcE32aT66KGDZTlUdCPwbN9Ir3uMXVLUP8BLwqFf+KPCFqvbFjWW01CvvBjymqr2A7cCooP41xlTBrmg25iBEJE9VoyspzwROVdXV3uCGG1U1XkS2AEmqWuSVZ6tqgojkAO1UtSBgH52Aj7yJUhCR3wPhqnpPLfxpxuzHagrGHBk9wOMDrVOZgoDHJVhfn/GRJQVjjsxFAfdzvMdfUzFd5KXAV97jT4BfQ/l81M1rK0hjqsuOSIw5uCYBI9mCmzu57LTUSBGZizvAusQruxZ4VkRuwc2gVjbC6XXAZG9UyxJcgsgOdvDGHArrUzDmMHl9CqmqusXvWIypKdZ8ZIwxppzVFIwxxpSzmoIxxphylhSMMcaUs6RgjDGmnCUFY4wx5SwpGGOMKff/5lP8vqwCFI8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import torch\n",
    "import json\n",
    "from torchtext.legacy import data\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import time\n",
    "from torch.nn import Embedding\n",
    "\n",
    "import random\n",
    "import math\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\"\"\"def get_examples(file):\n",
    "    ak = json.load(open(file))\n",
    "    examples = []\n",
    "    for j, i in enumerate(ak):\n",
    "        context = \"\".join([k for j in i['context'] for k in j[1]])\n",
    "        question = i['question']\n",
    "        answer = i['answer']\n",
    "        examples.append([context, question, answer])\n",
    "    return examples\"\"\"\n",
    "\n",
    "def get_examples(file):\n",
    "    ak = json.load(open(file))\n",
    "    examples = []\n",
    "    for j, i in enumerate(ak):\n",
    "        # Limiting examples coz ram not sufficient. find another way..some sort of yield\n",
    "        if len(examples) > 50000:\n",
    "          break\n",
    "        context = \"\".join([k for j in i['context'] for k in j[1]])\n",
    "        question = i['question']\n",
    "        answer = i['answer']\n",
    "        examples.append([context + question_pad + question, answer])\n",
    "    return examples\n",
    "\n",
    "def get_data(train_file, test_file):\n",
    "    train_examples = get_examples(train_file)\n",
    "    test_examples = get_examples(test_file)\n",
    "\n",
    "    context_with_question = data.Field(sequential = True, tokenize = 'spacy', init_token = '<sos>', eos_token = '<eos>')\n",
    "    answer = data.Field(sequential = True, tokenize = 'spacy', init_token = '<sos>', eos_token = '<eos>')\n",
    "    fields = [('context', context_with_question), ('answer', answer)]\n",
    "    train_Examples = [data.Example.fromlist([i[0], i[1]], fields) for i in train_examples]\n",
    "    train_dataset = data.Dataset(train_Examples, fields)\n",
    "\n",
    "    test_Examples = [data.Example.fromlist([i[0], i[1]], fields) for i in test_examples]\n",
    "    test_dataset = data.Dataset(test_Examples, fields)\n",
    "\n",
    "    context_with_question.build_vocab(train_dataset, min_freq = 2, max_size = 30000,vectors = \"glove.6B.100d\",\n",
    "                 unk_init = torch.Tensor.normal_)\n",
    "    answer.vocab = context_with_question.vocab\n",
    "    return context_with_question, answer, train_dataset, test_dataset\n",
    "\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, input_dim, emb_dim, hid_dim, dropout):\n",
    "        super().__init__()\n",
    "        self.hid_dim = hid_dim\n",
    "        self.embedding = nn.Embedding(input_dim, emb_dim)  # no dropout as only one layer!\n",
    "        self.rnn = nn.GRU(emb_dim, hid_dim)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "\n",
    "    def forward(self, src):\n",
    "        embedded = self.dropout(self.embedding(src))\n",
    "        outputs, hidden = self.rnn(embedded)  # no cell state!\n",
    "        return hidden\n",
    "\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, output_dim, emb_dim, hid_dim, dropout):\n",
    "        super().__init__()\n",
    "        self.hid_dim = hid_dim\n",
    "        self.output_dim = output_dim\n",
    "        self.embedding = nn.Embedding(output_dim, emb_dim)\n",
    "        self.rnn = nn.GRU(emb_dim + hid_dim, hid_dim)\n",
    "        self.fc_out = nn.Linear(emb_dim + hid_dim * 2, output_dim)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "\n",
    "    def forward(self, input, hidden, context):\n",
    "        input = input.unsqueeze(0)\n",
    "        embedded = self.dropout(self.embedding(input))\n",
    "        emb_con = torch.cat((embedded, context), dim=2)\n",
    "        output, hidden = self.rnn(emb_con, hidden)\n",
    "        output = torch.cat((embedded.squeeze(0), hidden.squeeze(0), context.squeeze(0)),\n",
    "                           dim=1)\n",
    "        prediction = self.fc_out(output)\n",
    "        return prediction, hidden\n",
    "\n",
    "class Seq2Seq(nn.Module):\n",
    "    def __init__(self, encoder, decoder, device):\n",
    "        super().__init__()\n",
    "        self.encoder = encoder\n",
    "        self.decoder = decoder\n",
    "        self.device = device\n",
    "        assert encoder.hid_dim == decoder.hid_dim, \"Hidden dimensions of encoder and decoder must be equal!\"\n",
    "\n",
    "    def forward(self, src, trg, teacher_forcing_ratio=0.5):\n",
    "        batch_size = trg.shape[1]\n",
    "        trg_len = trg.shape[0]\n",
    "        trg_vocab_size = self.decoder.output_dim\n",
    "        outputs = torch.zeros(trg_len, batch_size, trg_vocab_size).to(self.device)\n",
    "        context = self.encoder(src)\n",
    "        hidden = context\n",
    "        input = trg[0, :]\n",
    "        for t in range(1, trg_len):\n",
    "            output, hidden = self.decoder(input, hidden, context)\n",
    "            outputs[t] = output\n",
    "            teacher_force = random.random() < teacher_forcing_ratio\n",
    "            top1 = output.argmax(1)\n",
    "            input = trg[t] if teacher_force else top1\n",
    "        return outputs\n",
    "\n",
    "def init_weights(m):\n",
    "    for name, param in m.named_parameters():\n",
    "        if not isinstance(m, Embedding):\n",
    "            nn.init.normal_(param.data, mean=0, std=0.01)\n",
    "\n",
    "def train(model, iterator, optimizer, criterion, clip):\n",
    "    model.train()\n",
    "    epoch_loss = 0\n",
    "    for i, batch in enumerate(iterator):\n",
    "        src = batch.context\n",
    "        trg = batch.answer\n",
    "        optimizer.zero_grad()\n",
    "        output = model(src, trg)\n",
    "        output_dim = output.shape[-1]\n",
    "        output = output[1:].view(-1, output_dim)\n",
    "        trg = trg[1:].view(-1)\n",
    "        loss = criterion(output, trg)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n",
    "        optimizer.step()\n",
    "        epoch_loss += loss.item()\n",
    "    return epoch_loss / len(iterator)\n",
    "\n",
    "def evaluate(model, iterator, criterion):\n",
    "    model.eval()\n",
    "    epoch_loss = 0\n",
    "    with torch.no_grad():\n",
    "        for i, batch in enumerate(iterator):\n",
    "            src = batch.context\n",
    "            trg = batch.answer\n",
    "            output = model(src, trg, 0)  # turn off teacher forcing\n",
    "            output_dim = output.shape[-1]\n",
    "            output = output[1:].view(-1, output_dim)\n",
    "            trg = trg[1:].view(-1)\n",
    "            loss = criterion(output, trg)\n",
    "            epoch_loss += loss.item()\n",
    "    return epoch_loss / len(iterator)\n",
    "\n",
    "def epoch_time(start_time, end_time):\n",
    "    elapsed_time = end_time - start_time\n",
    "    elapsed_mins = int(elapsed_time / 60)\n",
    "    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n",
    "    return elapsed_mins, elapsed_secs\n",
    "\n",
    "def model_training(epochs):\n",
    "    best_valid_loss = float('inf')\n",
    "    for epoch in range(epochs):\n",
    "        start_time = time.time()\n",
    "        train_loss = train(model, train_iterator, optimizer, criterion, CLIP)\n",
    "        valid_loss = evaluate(model, test_iterator, criterion)\n",
    "\n",
    "        end_time = time.time()\n",
    "        epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n",
    "\n",
    "        if valid_loss < best_valid_loss:\n",
    "            best_valid_loss = valid_loss\n",
    "            torch.save(model.state_dict(), 'tut2-model.pt')\n",
    "\n",
    "        train_loss_PPL = math.exp(train_loss)\n",
    "        valid_loss_PPL = math.exp(valid_loss)\n",
    "        print(f'Epoch: {epoch + 1:02} | Time: {epoch_mins}m {epoch_secs}s')\n",
    "        print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {train_loss_PPL:7.3f}')\n",
    "        print(f'\\t Val. Loss: {valid_loss:.3f} |  Val. PPL: {valid_loss_PPL:7.3f}')\n",
    "\n",
    "        return train_loss, valid_loss, train_loss_PPL, valid_loss_PPL\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    question_pad = ' @qpad '\n",
    "\n",
    "    BATCH_SIZE = 128\n",
    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "    train_file = \"data/hotpot_train_v1.1.json\"\n",
    "    test_file = \"data/hotpot_dev_fullwiki_v1.json\"\n",
    "    context_with_question, answer, train_dataset, test_dataset = get_data(train_file, test_file)\n",
    "    train_iterator, test_iterator = data.BucketIterator.splits(\n",
    "        (train_dataset, test_dataset), batch_size = BATCH_SIZE,\n",
    "        sort_key = lambda x: len(x.context), sort_within_batch = True, device = device)\n",
    "\n",
    "    INPUT_DIM = len(context_with_question.vocab)\n",
    "    OUTPUT_DIM = len(context_with_question.vocab)\n",
    "    ENC_EMB_DIM = 100\n",
    "    DEC_EMB_DIM = 100\n",
    "    HID_DIM = 200\n",
    "    ENC_DROPOUT = 0.5\n",
    "    DEC_DROPOUT = 0.5\n",
    "\n",
    "    enc = Encoder(INPUT_DIM, ENC_EMB_DIM, HID_DIM, ENC_DROPOUT)\n",
    "    dec = Decoder(OUTPUT_DIM, DEC_EMB_DIM, HID_DIM, DEC_DROPOUT)\n",
    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "    model = Seq2Seq(enc, dec, device).to(device)\n",
    "    model.apply(init_weights)\n",
    "    optimizer = optim.Adam(model.parameters())\n",
    "    TRG_PAD_IDX = answer.vocab.stoi[answer.pad_token]\n",
    "    criterion = nn.CrossEntropyLoss(ignore_index=TRG_PAD_IDX)\n",
    "\n",
    "    epochs = 10\n",
    "    CLIP = 1\n",
    "\n",
    "    train_loss_list = []\n",
    "    valid_loss_list = []\n",
    "    train_loss_PPL_list = []\n",
    "    valid_loss_PPL_list = []\n",
    "    epoch_list = [i for i in range(1, epochs + 1)]\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        train_loss, valid_loss, train_loss_PPL, valid_loss_PPL = model_training(epochs)\n",
    "\n",
    "        train_loss_list.append(train_loss)\n",
    "        valid_loss_list.append(valid_loss)\n",
    "        train_loss_PPL_list.append(train_loss_PPL)\n",
    "        valid_loss_PPL_list.append(valid_loss_PPL)\n",
    "\n",
    "    # Training & Testing Accuracy Plot\n",
    "    plt.plot(epoch_list, train_loss_list, color = 'tomato', label = 'Train Loss')\n",
    "    plt.plot(epoch_list, valid_loss_list, color = 'limegreen', label = 'Valid Loss')\n",
    "    plt.legend(loc = 'lower left')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Train and Valid Loss of HOTPOTQA Dataset')\n",
    "    plt.show()\n",
    "\n",
    "    # Training & Testing Loss Plot\n",
    "    plt.plot(epoch_list, train_loss_PPL_list, color = 'tomato', label = 'Train Loss PPL')\n",
    "    plt.plot(epoch_list, valid_loss_PPL_list, color = 'limegreen', label = 'Valid Loss PPL')\n",
    "    plt.legend(loc = 'lower left')\n",
    "    plt.xlabel('Epoch')\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Train and Valid Loss PPL of HOTPOTQA Dataset')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fa58eefe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "doc = nlp(u\"This is an example sentence.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8363c7d3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
